
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Oct 20 16:49:59 BRT 2012
//----------------------------------------------------

package analisador.sintatico;

import Absyn.ArrayExp;
import Absyn.ArrayTy;
import Absyn.AssignExp;
import Absyn.BreakExp;
import Absyn.CallExp;
import Absyn.Dec;
import Absyn.DecList;
import Absyn.Exp;
import Absyn.ExpList;
import Absyn.FieldExpList;
import Absyn.FieldList;
import Absyn.FieldVar;
import Absyn.ForExp;
import Absyn.FunctionDec;
import Absyn.IfExp;
import Absyn.IntExp;
import Absyn.LetExp;
import Absyn.NameTy;
import Absyn.NilExp;
import Absyn.OpExp;
import Absyn.RecordExp;
import Absyn.RecordTy;
import Absyn.SeqExp;
import Absyn.SimpleVar;
import Absyn.StringExp;
import Absyn.SubscriptVar;
import Absyn.Ty;
import Absyn.TypeDec;
import Absyn.Var;
import Absyn.VarDec;
import Absyn.VarExp;
import Absyn.WhileExp;
import analisador.lexico.Lexer;
import error.ErrorMsg;




/** CUP v0.10k generated parser.
  * @version Sat Oct 20 16:49:59 BRT 2012
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\076\000\002\002\004\000\002\003\002\000\002\003" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\006\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\011\002\000\002\011\006\000\002" +
    "\012\002\000\002\012\007\000\002\006\006\000\002\006" +
    "\010\000\002\007\011\000\002\007\013\000\002\013\003" +
    "\000\002\013\005\000\002\013\006\000\002\013\006\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\006\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\006\000\002\021\002\000\002\021\006\000\002\022\002" +
    "\000\002\022\007\000\002\014\010\000\002\014\005\000" +
    "\002\014\010\000\002\014\006\000\002\014\006\000\002" +
    "\014\012\000\002\014\003\000\002\014\007\000\002\015" +
    "\002\000\002\015\004\000\002\016\002\000\002\016\005" +
    "\000\002\017\002\000\002\017\004\000\002\020\002\000" +
    "\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\030\004\014\005\012\006\005\012\016\022" +
    "\004\037\013\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\030\004\014\005\012\006\005\012\016\022" +
    "\004\037\013\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\070\002\uffe8\007\uffe8\011\uffe8\013\uffe8\015" +
    "\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\040\uffe8\041\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\001\002\000\030\004\014\005" +
    "\012\006\005\012\016\022\004\037\013\042\006\043\007" +
    "\046\015\052\020\053\010\001\002\000\004\004\206\001" +
    "\002\000\070\002\uffea\007\uffea\011\uffea\013\uffea\015\uffea" +
    "\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\040\uffea\041\uffea\044\uffea\045\uffea\047\uffea\050\uffea\054" +
    "\uffea\055\uffea\056\uffea\001\002\000\034\002\205\021\032" +
    "\022\025\023\036\024\027\025\033\026\031\027\037\030" +
    "\034\031\035\032\030\033\026\034\040\001\002\000\070" +
    "\002\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\017\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\040\uffe7\041" +
    "\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\001\002\000\030\004\014\005\012\006\005\012" +
    "\016\022\004\037\013\042\006\043\007\046\015\052\020" +
    "\053\010\001\002\000\102\002\uffef\007\uffef\011\uffef\012" +
    "\151\013\uffef\014\150\015\uffef\016\147\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\040\uffef\041\uffef\044\uffef\045\uffef\047\uffef\050\uffef\054" +
    "\uffef\055\uffef\056\uffef\001\002\000\012\047\000\054\074" +
    "\055\067\056\075\001\002\000\032\004\014\005\012\006" +
    "\005\012\016\013\uffcb\022\004\037\013\042\006\043\007" +
    "\046\015\052\020\053\010\001\002\000\076\002\uffeb\007" +
    "\uffeb\011\uffeb\013\uffeb\014\021\015\uffeb\017\uffeb\020\022" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\023" +
    "\040\uffeb\041\uffeb\044\uffeb\045\uffeb\047\uffeb\050\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\001\002\000\070\002\uffcd\007\uffcd" +
    "\011\uffcd\013\uffcd\015\uffcd\017\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\033\uffcd\034\uffcd\040\uffcd\041\uffcd\044\uffcd\045" +
    "\uffcd\047\uffcd\050\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002" +
    "\000\030\004\014\005\012\006\005\012\016\022\004\037" +
    "\013\042\006\043\007\046\015\052\020\053\010\001\002" +
    "\000\004\004\055\001\002\000\030\004\014\005\012\006" +
    "\005\012\016\022\004\037\013\042\006\043\007\046\015" +
    "\052\020\053\010\001\002\000\070\002\uffd2\007\uffd2\011" +
    "\uffd2\013\uffd2\015\uffd2\017\uffd2\021\032\022\025\023\036" +
    "\024\027\025\033\026\031\027\037\030\034\031\035\032" +
    "\030\033\026\034\040\040\uffd2\041\uffd2\044\uffd2\045\uffd2" +
    "\047\uffd2\050\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\070\002\uffd9\007\uffd9\011\uffd9\013\uffd9\015\uffd9\017\uffd9" +
    "\021\032\022\025\023\036\024\027\025\033\026\031\027" +
    "\037\030\034\031\035\032\030\033\026\034\uffd9\040\uffd9" +
    "\041\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\001\002\000\054\002\uffdd\007\uffdd\011\uffdd" +
    "\013\uffdd\015\uffdd\017\uffdd\021\032\022\025\023\036\024" +
    "\027\033\uffdd\034\uffdd\040\uffdd\041\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\054\uffdd\055\uffdd\056\uffdd\001\002\000" +
    "\070\002\uffe2\007\uffe2\011\uffe2\013\uffe2\015\uffe2\017\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\054\uffe2\055" +
    "\uffe2\056\uffe2\001\002\000\054\002\uffde\007\uffde\011\uffde" +
    "\013\uffde\015\uffde\017\uffde\021\032\022\025\023\036\024" +
    "\027\033\uffde\034\uffde\040\uffde\041\uffde\044\uffde\045\uffde" +
    "\047\uffde\050\uffde\054\uffde\055\uffde\056\uffde\001\002\000" +
    "\054\002\uffdb\007\uffdb\011\uffdb\013\uffdb\015\uffdb\017\uffdb" +
    "\021\032\022\025\023\036\024\027\033\uffdb\034\uffdb\040" +
    "\uffdb\041\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\001\002\000\054\002\uffe0\007\uffe0\011" +
    "\uffe0\013\uffe0\015\uffe0\017\uffe0\021\032\022\025\023\036" +
    "\024\027\033\uffe0\034\uffe0\040\uffe0\041\uffe0\044\uffe0\045" +
    "\uffe0\047\uffe0\050\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002" +
    "\000\070\002\uffe4\007\uffe4\011\uffe4\013\uffe4\015\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\023\036\024\027\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\040" +
    "\uffe4\041\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\001\002\000\054\002\uffdf\007\uffdf\011" +
    "\uffdf\013\uffdf\015\uffdf\017\uffdf\021\032\022\025\023\036" +
    "\024\027\033\uffdf\034\uffdf\040\uffdf\041\uffdf\044\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002" +
    "\000\054\002\uffdc\007\uffdc\011\uffdc\013\uffdc\015\uffdc\017" +
    "\uffdc\021\032\022\025\023\036\024\027\033\uffdc\034\uffdc" +
    "\040\uffdc\041\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\001\002\000\070\002\uffe1\007\uffe1" +
    "\011\uffe1\013\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\040\uffe1\041\uffe1\044\uffe1\045" +
    "\uffe1\047\uffe1\050\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002" +
    "\000\070\002\uffda\007\uffda\011\uffda\013\uffda\015\uffda\017" +
    "\uffda\021\032\022\025\023\036\024\027\025\033\026\031" +
    "\027\037\030\034\031\035\032\030\033\uffda\034\uffda\040" +
    "\uffda\041\uffda\044\uffda\045\uffda\047\uffda\050\uffda\054\uffda" +
    "\055\uffda\056\uffda\001\002\000\070\002\uffe3\007\uffe3\011" +
    "\uffe3\013\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\036" +
    "\024\027\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\040\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\047\uffe3\050\uffe3\054\uffe3\055\uffe3\056\uffe3\001\002\000" +
    "\076\002\uffee\007\uffee\011\uffee\013\uffee\014\uffee\015\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\040\uffee\041\uffee\044\uffee\045\uffee\047" +
    "\uffee\050\uffee\054\uffee\055\uffee\056\uffee\001\002\000\034" +
    "\015\057\021\032\022\025\023\036\024\027\025\033\026" +
    "\031\027\037\030\034\031\035\032\030\033\026\034\040" +
    "\001\002\000\076\002\uffed\007\uffed\011\uffed\013\uffed\014" +
    "\uffed\015\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed\044\uffed" +
    "\045\uffed\047\uffed\050\uffed\054\uffed\055\uffed\056\uffed\001" +
    "\002\000\004\013\066\001\002\000\040\011\063\013\uffc9" +
    "\021\032\022\025\023\036\024\027\025\033\026\031\027" +
    "\037\030\034\031\035\032\030\033\026\034\040\050\uffc9" +
    "\001\002\000\006\013\uffca\050\uffca\001\002\000\030\004" +
    "\014\005\012\006\005\012\016\022\004\037\013\042\006" +
    "\043\007\046\015\052\020\053\010\001\002\000\040\011" +
    "\063\013\uffc9\021\032\022\025\023\036\024\027\025\033" +
    "\026\031\027\037\030\034\031\035\032\030\033\026\034" +
    "\040\050\uffc9\001\002\000\006\013\uffc8\050\uffc8\001\002" +
    "\000\070\002\uffe9\007\uffe9\011\uffe9\013\uffe9\015\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\040" +
    "\uffe9\041\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\001\002\000\004\004\140\001\002\000" +
    "\012\047\ufffe\054\ufffe\055\ufffe\056\ufffe\001\002\000\012" +
    "\047\ufffd\054\ufffd\055\ufffd\056\ufffd\001\002\000\004\047" +
    "\135\001\002\000\012\047\ufffc\054\ufffc\055\ufffc\056\ufffc" +
    "\001\002\000\004\004\123\001\002\000\004\004\100\001" +
    "\002\000\012\047\000\054\074\055\067\056\075\001\002" +
    "\000\004\047\uffff\001\002\000\004\025\101\001\002\000" +
    "\010\004\103\016\104\036\105\001\002\000\012\047\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\001\002\000\012\047\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\001\002\000\006\004\110\017\ufff7" +
    "\001\002\000\004\051\106\001\002\000\004\004\107\001" +
    "\002\000\012\047\ufff8\054\ufff8\055\ufff8\056\ufff8\001\002" +
    "\000\004\010\113\001\002\000\004\017\112\001\002\000" +
    "\012\047\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\004" +
    "\004\114\001\002\000\010\007\115\013\ufff5\017\ufff5\001" +
    "\002\000\004\004\117\001\002\000\006\013\ufff6\017\ufff6" +
    "\001\002\000\004\010\120\001\002\000\004\004\121\001" +
    "\002\000\010\007\115\013\ufff5\017\ufff5\001\002\000\006" +
    "\013\ufff4\017\ufff4\001\002\000\004\012\124\001\002\000" +
    "\006\004\110\013\ufff7\001\002\000\004\013\126\001\002" +
    "\000\006\010\130\025\127\001\002\000\030\004\014\005" +
    "\012\006\005\012\016\022\004\037\013\042\006\043\007" +
    "\046\015\052\020\053\010\001\002\000\004\004\131\001" +
    "\002\000\004\025\132\001\002\000\030\004\014\005\012" +
    "\006\005\012\016\022\004\037\013\042\006\043\007\046" +
    "\015\052\020\053\010\001\002\000\042\021\032\022\025" +
    "\023\036\024\027\025\033\026\031\027\037\030\034\031" +
    "\035\032\030\033\026\034\040\047\ufff0\054\ufff0\055\ufff0" +
    "\056\ufff0\001\002\000\042\021\032\022\025\023\036\024" +
    "\027\025\033\026\031\027\037\030\034\031\035\032\030" +
    "\033\026\034\040\047\ufff1\054\ufff1\055\ufff1\056\ufff1\001" +
    "\002\000\032\004\014\005\012\006\005\012\016\022\004" +
    "\037\013\042\006\043\007\046\015\050\uffcb\052\020\053" +
    "\010\001\002\000\004\050\137\001\002\000\070\002\uffcc" +
    "\007\uffcc\011\uffcc\013\uffcc\015\uffcc\017\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\040\uffcc\041\uffcc\044" +
    "\uffcc\045\uffcc\047\uffcc\050\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\001\002\000\006\010\141\035\142\001\002\000\004\004" +
    "\144\001\002\000\030\004\014\005\012\006\005\012\016" +
    "\022\004\037\013\042\006\043\007\046\015\052\020\053" +
    "\010\001\002\000\042\021\032\022\025\023\036\024\027" +
    "\025\033\026\031\027\037\030\034\031\035\032\030\033" +
    "\026\034\040\047\ufff3\054\ufff3\055\ufff3\056\ufff3\001\002" +
    "\000\004\035\145\001\002\000\030\004\014\005\012\006" +
    "\005\012\016\022\004\037\013\042\006\043\007\046\015" +
    "\052\020\053\010\001\002\000\042\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\047\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\001\002\000\006\004\165\017\uffd7\001\002\000\030" +
    "\004\014\005\012\006\005\012\016\022\004\037\013\042" +
    "\006\043\007\046\015\052\020\053\010\001\002\000\032" +
    "\004\014\005\012\006\005\012\016\013\uffc7\022\004\037" +
    "\013\042\006\043\007\046\015\052\020\053\010\001\002" +
    "\000\004\013\160\001\002\000\036\007\154\013\uffc5\021" +
    "\032\022\025\023\036\024\027\025\033\026\031\027\037" +
    "\030\034\031\035\032\030\033\026\034\040\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\004\013\uffc6\001\002\000\036\007\154\013\uffc5\021\032" +
    "\022\025\023\036\024\027\025\033\026\031\027\037\030" +
    "\034\031\035\032\030\033\026\034\040\001\002\000\004" +
    "\013\uffc4\001\002\000\070\002\uffe5\007\uffe5\011\uffe5\013" +
    "\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\047\uffe5" +
    "\050\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000\034\015" +
    "\162\021\032\022\025\023\036\024\027\025\033\026\031" +
    "\027\037\030\034\031\035\032\030\033\026\034\040\001" +
    "\002\000\100\002\uffec\007\uffec\011\uffec\013\uffec\014\uffec" +
    "\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\040\uffec\041\uffec\044\uffec\045" +
    "\uffec\047\uffec\050\uffec\051\163\054\uffec\055\uffec\056\uffec" +
    "\001\002\000\030\004\014\005\012\006\005\012\016\022" +
    "\004\037\013\042\006\043\007\046\015\052\020\053\010" +
    "\001\002\000\070\002\uffd3\007\uffd3\011\uffd3\013\uffd3\015" +
    "\uffd3\017\uffd3\021\032\022\025\023\036\024\027\025\033" +
    "\026\031\027\037\030\034\031\035\032\030\033\026\034" +
    "\040\040\uffd3\041\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3" +
    "\054\uffd3\055\uffd3\056\uffd3\001\002\000\004\025\170\001" +
    "\002\000\004\017\167\001\002\000\070\002\uffd8\007\uffd8" +
    "\011\uffd8\013\uffd8\015\uffd8\017\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\040\uffd8\041\uffd8\044\uffd8\045" +
    "\uffd8\047\uffd8\050\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002" +
    "\000\030\004\014\005\012\006\005\012\016\022\004\037" +
    "\013\042\006\043\007\046\015\052\020\053\010\001\002" +
    "\000\036\007\173\017\uffd5\021\032\022\025\023\036\024" +
    "\027\025\033\026\031\027\037\030\034\031\035\032\030" +
    "\033\026\034\040\001\002\000\004\017\uffd6\001\002\000" +
    "\004\004\174\001\002\000\004\025\175\001\002\000\030" +
    "\004\014\005\012\006\005\012\016\022\004\037\013\042" +
    "\006\043\007\046\015\052\020\053\010\001\002\000\036" +
    "\007\173\017\uffd5\021\032\022\025\023\036\024\027\025" +
    "\033\026\031\027\037\030\034\031\035\032\030\033\026" +
    "\034\040\001\002\000\004\017\uffd4\001\002\000\034\021" +
    "\032\022\025\023\036\024\027\025\033\026\031\027\037" +
    "\030\034\031\035\032\030\033\026\034\040\040\201\001" +
    "\002\000\030\004\014\005\012\006\005\012\016\022\004" +
    "\037\013\042\006\043\007\046\015\052\020\053\010\001" +
    "\002\000\070\002\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0" +
    "\017\uffd0\021\032\022\025\023\036\024\027\025\033\026" +
    "\031\027\037\030\034\031\035\032\030\033\026\034\040" +
    "\040\uffd0\041\203\044\uffd0\045\uffd0\047\uffd0\050\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\001\002\000\030\004\014\005\012" +
    "\006\005\012\016\022\004\037\013\042\006\043\007\046" +
    "\015\052\020\053\010\001\002\000\070\002\uffd1\007\uffd1" +
    "\011\uffd1\013\uffd1\015\uffd1\017\uffd1\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\040\uffd1\041\uffd1\044\uffd1\045" +
    "\uffd1\047\uffd1\050\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002" +
    "\000\004\002\001\001\002\000\004\035\207\001\002\000" +
    "\030\004\014\005\012\006\005\012\016\022\004\037\013" +
    "\042\006\043\007\046\015\052\020\053\010\001\002\000" +
    "\034\021\032\022\025\023\036\024\027\025\033\026\031" +
    "\027\037\030\034\031\035\032\030\033\026\034\040\044" +
    "\211\001\002\000\030\004\014\005\012\006\005\012\016" +
    "\022\004\037\013\042\006\043\007\046\015\052\020\053" +
    "\010\001\002\000\034\021\032\022\025\023\036\024\027" +
    "\025\033\026\031\027\037\030\034\031\035\032\030\033" +
    "\026\034\040\045\213\001\002\000\030\004\014\005\012" +
    "\006\005\012\016\022\004\037\013\042\006\043\007\046" +
    "\015\052\020\053\010\001\002\000\070\002\uffce\007\uffce" +
    "\011\uffce\013\uffce\015\uffce\017\uffce\021\032\022\025\023" +
    "\036\024\027\025\033\026\031\027\037\030\034\031\035" +
    "\032\030\033\026\034\040\040\uffce\041\uffce\044\uffce\045" +
    "\uffce\047\uffce\050\uffce\054\uffce\055\uffce\056\uffce\001\002" +
    "\000\034\021\032\022\025\023\036\024\027\025\033\026" +
    "\031\027\037\030\034\031\035\032\030\033\026\034\040" +
    "\045\216\001\002\000\030\004\014\005\012\006\005\012" +
    "\016\022\004\037\013\042\006\043\007\046\015\052\020" +
    "\053\010\001\002\000\070\002\uffcf\007\uffcf\011\uffcf\013" +
    "\uffcf\015\uffcf\017\uffcf\021\032\022\025\023\036\024\027" +
    "\025\033\026\031\027\037\030\034\031\035\032\030\033" +
    "\026\034\040\040\uffcf\041\uffcf\044\uffcf\045\uffcf\047\uffcf" +
    "\050\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\070\002" +
    "\uffe6\007\uffe6\011\uffe6\013\uffe6\015\uffe6\017\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\040\uffe6\041\uffe6" +
    "\044\uffe6\045\uffe6\047\uffe6\050\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\013\016\014\010\001\001\000\006\013" +
    "\016\014\217\001\001\000\002\001\001\000\006\013\016" +
    "\014\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\016\014\177" +
    "\001\001\000\002\001\001\000\014\003\071\004\075\005" +
    "\067\006\070\007\072\001\001\000\010\013\016\014\060" +
    "\015\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\016\014\055\001\001\000\002\001\001\000\006" +
    "\013\016\014\023\001\001\000\002\001\001\000\006\013" +
    "\016\014\053\001\001\000\006\013\016\014\052\001\001" +
    "\000\006\013\016\014\051\001\001\000\006\013\016\014" +
    "\050\001\001\000\006\013\016\014\047\001\001\000\006" +
    "\013\016\014\046\001\001\000\006\013\016\014\045\001" +
    "\001\000\006\013\016\014\044\001\001\000\006\013\016" +
    "\014\043\001\001\000\006\013\016\014\042\001\001\000" +
    "\006\013\016\014\041\001\001\000\006\013\016\014\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\061\001\001\000\002\001\001\000\006" +
    "\013\016\014\063\001\001\000\004\016\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\076" +
    "\004\075\005\067\006\070\007\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\016\014\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\016\014\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\016\014\060\015\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\016\014\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\016\014" +
    "\145\001\001\000\002\001\001\000\004\021\165\001\001" +
    "\000\006\013\016\014\160\001\001\000\010\013\016\014" +
    "\152\017\151\001\001\000\002\001\001\000\004\020\154" +
    "\001\001\000\006\013\016\014\155\001\001\000\002\001" +
    "\001\000\004\020\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\016\014\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\016\014" +
    "\170\001\001\000\004\022\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\016\014" +
    "\175\001\001\000\004\022\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\016\014\201\001\001\000" +
    "\002\001\001\000\006\013\016\014\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\016\014\207\001\001\000\002\001\001\000\006\013\016" +
    "\014\211\001\001\000\002\001\001\000\006\013\016\014" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\016\014\216\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  public Absyn.Exp parseResult;
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg errorMsg;

  public void report_error(String message, 
			   java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expseqf2 ::= COMMA exp expseqf2 
            {
              ExpList RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ExpList(head, tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expseqf2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expseqf2 ::= 
            {
              ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expseqf2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expseqf ::= exp expseqf2 
            {
              ExpList RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ExpList(head, tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*expseqf*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expseqf ::= 
            {
              ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*expseqf*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expseq2 ::= SEMICOLON exp expseq2 
            {
              ExpList RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ExpList(head, tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*expseq2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expseq2 ::= 
            {
              ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*expseq2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expseq ::= exp expseq2 
            {
              ExpList RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ExpList(head, tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*expseq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expseq ::= 
            {
              ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*expseq*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= LET decs IN expseq END 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		DecList decs = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ExpList body = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	if (body == null) {
		RESULT = new LetExp(uleft, decs, new SeqExp(0, null));
	} else if (body.tail == null) {
		RESULT = new LetExp(uleft, decs, body.head);
	} else {
		RESULT = new LetExp(uleft, decs, new SeqExp(bodyleft, body));
	}

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= BREAK 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new BreakExp(uleft);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= FOR ID ASSIGN exp TO exp DO exp 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int hileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp hi = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ForExp(uleft, new VarDec(nameleft, sym(name),
		new NameTy(nameright, sym("int")), init), hi, body);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= WHILE exp DO exp 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new WhileExp(uleft, test, body);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= IF exp THEN exp 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int thenclauseleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int thenclauseright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp thenclause = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new IfExp(uleft, test, thenclause);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= IF exp THEN exp ELSE exp 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int testleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Exp test = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int thenclauseleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int thenclauseright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp thenclause = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int elseclauseleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elseclauseright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp elseclause = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new IfExp(uleft, test, thenclause, elseclause);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= lvalue ASSIGN exp 
            {
              Exp RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new AssignExp(varleft, var, exp);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= ID LBRACK exp RBRACK OF exp 
            {
              Exp RESULT = null;
		int typleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Exp size = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ArrayExp(typleft, sym(typ), size, init);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fieldexps2 ::= COMMA ID EQ exp fieldexps2 
            {
              FieldExpList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldExpList tail = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FieldExpList(nameleft, sym(name), init, tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*fieldexps2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fieldexps2 ::= 
            {
              FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*fieldexps2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // fieldexps ::= ID EQ exp fieldexps2 
            {
              FieldExpList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldExpList tail = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FieldExpList(nameleft, sym(name), init, tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*fieldexps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // fieldexps ::= 
            {
              FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*fieldexps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= ID LBRACE fieldexps RBRACE 
            {
              Exp RESULT = null;
		int typleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldExpList fields = (FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	RESULT = new RecordExp(typleft, sym(typ), fields);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp OR exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new IfExp(e1left, e1, new IntExp(e1right, 1), e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp AND exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new IfExp(e1left, e1, e2, new IntExp(e2right, 0));

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp LE exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.LE, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp GE exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.GE, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp LT exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.LT, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp GT exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.GT, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp NEQ exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.NE, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp EQ exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.EQ, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp DIVIDE exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.DIV, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp TIMES exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.MUL, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp MINUS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.MINUS, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp PLUS exp 
            {
              Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(e1left, e1, OpExp.PLUS, e2);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= ID LPAREN expseqf RPAREN 
            {
              Exp RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ExpList args = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	RESULT = new CallExp(funcleft, sym(func), args);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= MINUS exp 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp right = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new OpExp(uleft, new IntExp(uleft, 0), OpExp.MINUS, right);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= STRING 
            {
              Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new StringExp(sleft, s.intern());

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= INT 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new IntExp(ileft, i);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= LPAREN expseq RPAREN 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		ExpList list = (ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	if (list == null) {
		RESULT = new SeqExp(0, null);
	} else if (list.tail == null) {
		RESULT = list.head;
	} else {
		RESULT = new SeqExp(uleft, list);
	}

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= NIL 
            {
              Exp RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new NilExp(uleft);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= lvalue 
            {
              Exp RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new VarExp(varleft, var);

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lvalue ::= ID LBRACK exp RBRACK 
            {
              Var RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	RESULT = new SubscriptVar(nameleft, new SimpleVar(nameleft, sym(name)), index);

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lvalue ::= lvalue LBRACK exp RBRACK 
            {
              Var RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp index = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	RESULT = new SubscriptVar(varleft, var, index);

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lvalue ::= lvalue DOT ID 
            {
              Var RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FieldVar(varleft, var, sym(field));

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lvalue ::= ID 
            {
              Var RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new SimpleVar(nameleft, sym(name));

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*lvalue*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // fundec ::= FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp 
            {
              FunctionDec RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		FieldList params = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int resultleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int resultright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String result = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FunctionDec(uleft, sym(name), params,
		new NameTy(resultleft, sym(result)), body, null);

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*fundec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fundec ::= FUNCTION ID LPAREN tyfields RPAREN EQ exp 
            {
              FunctionDec RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		FieldList params = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FunctionDec(uleft, sym(name), params, null, body, null);

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*fundec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vardec ::= VAR ID COLON ID ASSIGN exp 
            {
              VarDec RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new VarDec(uleft, sym(name), new NameTy(typleft, sym(typ)), init);

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*vardec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vardec ::= VAR ID ASSIGN exp 
            {
              VarDec RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Exp init = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new VarDec(uleft, sym(name), null, init);

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*vardec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tyfields2 ::= COMMA ID COLON ID tyfields2 
            {
              FieldList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList tail = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FieldList(nameleft, sym(name), sym(typ), tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyfields2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tyfields2 ::= 
            {
              FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*tyfields2*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tyfields ::= ID COLON ID tyfields2 
            {
              FieldList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FieldList tail = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new FieldList(nameleft, sym(name), sym(typ), tail);

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*tyfields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tyfields ::= 
            {
              FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*tyfields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ty ::= ARRAY OF ID 
            {
              Ty RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String typ = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new ArrayTy(uleft, sym(typ));

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ty ::= LBRACE tyfields RBRACE 
            {
              Ty RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		FieldList fields = (FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
	RESULT = new RecordTy(uleft, fields);

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ty ::= ID 
            {
              Ty RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new NameTy(nameleft, sym(name));

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*ty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tydec ::= TYPE ID EQ ty 
            {
              TypeDec RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = new TypeDec(uleft, sym(name), ty, null);

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*tydec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= fundec 
            {
              Dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		FunctionDec d = (FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = d;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= vardec 
            {
              Dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		VarDec d = (VarDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = d;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= tydec 
            {
              Dec RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		TypeDec d = (TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	RESULT = d;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decs ::= dec decs 
            {
              DecList RESULT = null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Dec head = (Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		DecList tail = (DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
	if (head instanceof TypeDec && tail != null && tail.head instanceof TypeDec) {
		TypeDec p = (TypeDec)head, q = (TypeDec)tail.head;
		RESULT = new DecList(new TypeDec(p.pos, p.name, p.ty, q), tail.tail);
	} else if (head instanceof FunctionDec && tail != null && tail.head instanceof FunctionDec) {
		FunctionDec p = (FunctionDec)head, q = (FunctionDec)tail.head;
		RESULT = new DecList(new FunctionDec(p.pos, p.name, p.params, p.result, p.body, q), tail.tail);
	} else {
		RESULT = new DecList(head, tail);
	}

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*decs*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // decs ::= 
            {
              DecList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*decs*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Exp start_val = (Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

